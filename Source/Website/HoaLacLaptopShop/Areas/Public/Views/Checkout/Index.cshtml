@using HoaLacLaptopShop.Areas.Public.ViewModels
@model HoaLacLaptopShop.Models.Order
@{
    ViewData["Title"] = "Checkout";
}

<link href="~/css/StyleSheet.css" rel="stylesheet">
<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
<div class="row">
    <div class="col-lg-8">
        <form id="checkoutForm" asp-action="ConfirmOrder" method="post" asp-controller="Checkout">
            <!-- Billing Info -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Billing Info</h5>
                    <div class="form-row">
                        <div class="form-group col-lg-6">
                            <label for="name">Name</label>
                            <input type="text" class="form-control" id="name" name="name" value="@Model.Buyer.Name" placeholder="Enter name" required>
                            <span class="text-danger" id="name-error"></span>
                        </div>
                        <div class="form-group col-lg-6">
                            <label for="email">Email Address</label>
                            <input type="email" class="form-control" id="email" name="email" value="@Model.Buyer.Email" placeholder="Enter email" required> 
                            <input type="email" class="form-control" id="email" name="email" value="" placeholder="Enter email" required>
                            <span class="text-danger" id="email-error"></span>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-lg-6">
                            <label for="phone">Phone</label>
                            <input type="tel" class="form-control" id="phone" name="phone" value="@Model.Buyer.PhoneNumber" placeholder="Enter Phone no." required>
                            <input type="tel" class="form-control" id="phone" name="phone" value="" placeholder="Enter Phone no." required>
                            <span class="text-danger" id="phone-error"></span>
                        </div>
                        <div class="form-group col-lg-6">
                            <label for="country">Country</label>
                            <input type="text" class="form-control" id="country" name="country" value="Viet Nam" disabled>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-lg-6">
                            <label for="city">City</label>
                            <select class="form-control" id="city" name="city" placeholder="Choose city" required>
                                <option value="0" disabled selected>Select City</option>
                                // Options rendered here
                            </select>
                        </div>
                        <div class="form-group col-lg-6">
                            <label for="district">District</label>
                            <select class="form-control" id="district" name="district" required>
                                <option value="0" disabled selected>Select District</option>
                                // Options rendered here
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-lg-6">
                            <label for="ward">Ward</label>
                            <select class="form-control" id="ward" name="ward" placeholder="Choose Ward" required>
                                <option value="0" disabled selected>Select Ward</option>
                                // Options rendered here
                            </select>

                        </div>
                    </div>
                    <div class="form-group">
                        <label for="address">Address</label>
                        <input type="text" class="form-control" id="address" name="address" placeholder="Enter address" required>
                        <span class="text-danger" id="address-error"></span>
                    </div>

                </div>
            </div>

            <!-- Payment Info -->
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Payment Info</h5>
                    <div class="row">
                        <div class="col-lg-3 selection-card active text-center" onclick="selectCard(this)">
                            <div class="custom-control custom-radio">
                                <input type="radio" id="creditCard" name="paymentMethod" class="custom-control-input" value="Online" />
                                <label class="custom-control-label">
                                    <i class="bx bx-credit-card d-block h2 mb-3"></i>
                                    <span class="mb-3 d-block">VN Pay</span>
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-3 selection-card text-center" onclick="selectCard(this)">
                            <div class="custom-control custom-radio">
                                <input type="radio" id="cashOnDelivery" name="paymentMethod" class="custom-control-input" value="CashOnDelivery" />
                                <label class="custom-control-label">
                                    <i class="bx bx-money d-block h2 mb-3"></i>
                                    <span class="mb-3 d-block">Cash on Delivery</span>
                                </label>
                            </div>
                        </div>
                        <input type="hidden" id="voucherCode" name="voucherCode" value="" />
                    </div>
                </div>
            </div>
            <button class="btn btn-primary btn-lg" type="submit" style="margin-top: 12px">Confirm Order</button>
        </form>
    </div>

    <div class="col-lg-4">
     <!-- Voucher Form (Separate) -->
        <form id="voucherForm" class="form-inline">
            <div class="form-group">
                <input type="text" class="form-control mr-2" id="voucher-code" placeholder="Enter voucher code" value "" />
                <button type="submit" class="btn btn-primary mt-2" style="margin-top: 12px">Submit</button>
            </div>
        </form>
        <div class="order-summary">
            <h5>Order Summary</h5>
            <ul class="list-group mb-3">
                @foreach (var item in Model.OrderDetails)
                {
                    <li class="list-group-item d-flex justify-content-between" style="align-items: center">
                        <div>
                            <h6 class="my-0">@item.Product.Name</h6>
                            <small class="text-muted">@item.Product.Price * @item.Quantity</small>
                        </div>
                        <span class="text-muted">@string.Format("{0:N0}", item.Product.Price * item.Quantity)</span>
                    </li>
                }
                <li class="list-group-item d-flex justify-content-between">
                    <span>Sub Total</span>
                    <strong id="subtotal">@string.Format("{0:N0}", Model.OrderDetails.Sum(i => i.Product.Price * i.Quantity))</strong>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <span>Discount</span>
                    <strong id="discount-value">-0</strong> <!-- Adjust as necessary -->
                </li>
                <li class="list-group-item d-flex justify-content-between">
                    <strong>Total</strong>
                    <strong id="total-amount">@string.Format("{0:N0}", Model.OrderDetails.Sum(i => i.Product.Price * i.Quantity))</strong>
                </li>
            </ul>
        </div>
    </div>

</div>
<!-- Order Summary -->
<!-- Bootstrap JS and dependencies -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
@*     <script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.5.4/dist/umd/popper.min.js"></script> *@
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.20.0/jquery.validate.min.js" integrity="sha512-WMEKGZ7L5LWgaPeJtw9MBM4i5w5OSBlSjTjCtSnvFJGSVD26gE5+Td12qN5pvWXhuWaWcVwF++F7aqu9cvqP0A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/4.0.0/jquery.validate.unobtrusive.min.js" integrity="sha512-xq+Vm8jC94ynOikewaQXMEkJIOBp7iArs3IhFWSWdRT3Pq8wFz46p+ZDFAR7kHnSFf+zUv52B3prRYnbDRdgog==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            if ($.validator) {
                $("#checkoutForm").validate({
                    rules: {
                        name: {
                            required: true,
                            minlength: 2,
                            maxlength: 256
                        },
                        email: {
                            required: true,
                            email: true
                        },
                        phone: {
                            required: true,
                            maxlength: 20,
                            digits: true
                        },
                        address: {
                            required: true,
                            minlength: 8,
                            maxlength: 256
                        }
                    },
                    messages: {
                        name: {
                            required: "Please enter the recipient's name",
                            minlength: "Name must be at least 2 characters long",
                            maxlength: "Name cannot exceed 256 characters"
                        },
                        email: {
                            required: "Please enter an email address",
                            email: "Please enter a valid email address"
                        },
                        phone: {
                            required: "Please enter a phone number",
                            maxlength: "Phone number cannot exceed 20 digits",
                            digits: "Please enter only digits"
                        },
                        address: {
                            required: "Please enter a street address",
                            minlength: "Address must be at least 8 characters long",
                            maxlength: "Address cannot exceed 256 characters"
                        }
                    },
                    errorElement: "span",
                    errorClass: "text-danger"
                });
            }
        });
    </script>
}
<script>
    // Get the select tags by id
    const provinceSelect = document.getElementById("city");
    const districtSelect = document.getElementById("district");
    const wardSelect = document.getElementById("ward");

    document.addEventListener('DOMContentLoaded', () => {

        function getProvinces() {
            fetch('https://esgoo.net/api-tinhthanh/1/0.htm')
                .then(function (response) {
                    return response.json();
                })
                .then(function (data_tinh) {
                    if (data_tinh.error === 0) {

                        data_tinh.data.forEach(function (val_tinh) {
                            var option = document.createElement('option');
                            option.value = val_tinh.full_name;
                            option.innerHTML = val_tinh.full_name;
                            option.setAttribute('data-province-id', val_tinh.id); // Set tinh.id as a data attribute
                            provinceSelect.appendChild(option);
                        });
                    }
                });
        }

        // Function to get districts
        function getDistricts(provinceId) {
            fetch('https://esgoo.net/api-tinhthanh/2/' + provinceId + '.htm')
                .then(function (response) {
                    return response.json();
                })
                .then(function (data_quan) {
                    if (data_quan.error === 0) {
                        districtSelect.innerHTML = ''; // Clear previous options

                        data_quan.data.forEach(function (val_quan) {
                            var option = document.createElement('option');
                            option.value = val_quan.full_name;
                            option.innerHTML = val_quan.full_name;
                            option.setAttribute('data-district-id', val_quan.id); // Set tinh.id as a data attribute
                            districtSelect.appendChild(option);
                        });
                    }
                });
        }

        function getWards(districtId) {
            fetch('https://esgoo.net/api-tinhthanh/3/' + districtId + '.htm')
                .then(function (response) {
                    return response.json();
                })
                .then(function (data_quan) {
                    if (data_quan.error === 0) {
                        wardSelect.innerHTML = ''; // Clear previous options

                        data_quan.data.forEach(function (val_phuong) {
                            var option = document.createElement('option');
                            option.value = val_phuong.full_name;
                            option.innerHTML = val_phuong.full_name;
                            wardSelect.appendChild(option);
                        });
                    }
                });
        }

        getProvinces();
        provinceSelect.addEventListener('change', function (e) {
            var selectedOption = e.target.options[e.target.selectedIndex];
            var provinceId = selectedOption.getAttribute('data-province-id'); // Get provinceId from data attribute
            getDistricts(provinceId);
        });

        districtSelect.addEventListener('change', (e) => {
            var selectedOption = e.target.options[e.target.selectedIndex];
            var districtId = selectedOption.getAttribute('data-district-id'); // Get districtId from data attribute;

            getWards(districtId)
        })
    })

    function selectCard(element) {
        // Remove 'active' class from all siblings
        const siblings = element.parentNode.children;
        for (let i = 0; i < siblings.length; i++) {
            siblings[i].classList.remove('active');
        }
        // Add 'active' class to the clicked element
        element.classList.add('active');
        // Check the inside input
        const input = element.querySelector('input');
        input.checked = true;
    }
</script>
<script>
    function formatCurrency(value) {
        return new Intl.NumberFormat('vi-VN', { style: 'decimal' }).format(value);
    };

    function parseCurrency(value) {
        const stringValue = value.toString();
        const normalizedValue = stringValue.replace(/\./g, '').replace(',', '.');
        return parseFloat(normalizedValue);

    };

    const totalAmountElement = document.getElementById('total-amount');
    const discountElement = document.getElementById('discount-value');

    document.getElementById('voucherForm').addEventListener('submit', function (event) {
        event.preventDefault();
        const voucherCode = document.getElementById('voucher-code').value;
        // Add voucher code length validation
        if (voucherCode.length > 20) {
            alert("Voucher code cannot exceed 20 characters");
            return;
        }

        const subtotalElement = document.getElementById('subtotal');
        const subtotal = parseCurrency(subtotalElement.textContent);
        
        document.getElementById('voucherCode').value = voucherCode; // Update hidden field in the main form
        const requestPayload = { voucherCode: voucherCode, subTotal: subtotal };
        fetch('/Checkout/CheckVoucher', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '@Html.AntiForgeryToken()' // Ensure you generate this token correctly
            },
            body: JSON.stringify(requestPayload)
        })
            .then(response => response.json())
            .then(data => {
                console.log(data)

                document.getElementById('voucherCode').value = voucherCode;

                if (data.valid === true) {
                    discountElement.textContent = `-${formatCurrency(data.discount)}`;
                    totalAmountElement.textContent = `${formatCurrency(subtotal - data.discount)}`;
                } else {
                    discountElement.textContent = '-0';
                    totalAmountElement.textContent = `${formatCurrency(subtotal)}`;
                }
            })
            .catch(error => console.error('Error:', error));
    });
    
</script>